@page "/products/details"

@using BitsAndBots.Configuration
@using BitsAndBots.Data
@using BitsAndBots.Service
@using Microsoft.EntityFrameworkCore
@using BitsAndBots.Models
@inject IConfiguration Configuration
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserService UserService

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
crossorigin="anonymous"></script>


@rendermode InteractiveServer

<PageTitle>Details</PageTitle>




<div>
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="page row">
            <div class="title-items">
                <div class="title">@product.Title</div>
                
            </div>
            
            <div class="col-md-6 col-sm-12">
                <div class="images">
                    
                    <div id="carousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            <button type="button" data-bs-target="#carousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                            @for (int i = 1; i < product.Images.ToArray().Length; i++)
                            {
                                <button type="button" data-bs-target="#carousel" data-bs-slide-to="@i" aria-label="Slide @i"></button>
                            }
                        </div>
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.ToArray()[0].ImageData)" class="d-block w-100" alt="...">
                            </div>
                            @for (int i = 1; i < product.Images.ToArray().Length; i++)
                            {
                                <div class="carousel-item">
                                    <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.ToArray()[i].ImageData)" class="d-block w-100" alt="..." />
                                </div>
                            }

                        </div>
                        
                    </div>
                    
                    <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon cara" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon cara" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>

            <div class="detail-items col-md-6 col-sm-12">
                <div class="desc-title">Sellers Description</div>
                <div class="description">@product.Description</div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="quantity">@product.Quantity available</div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="creator">Created by <a href="@($"/{product.CreatedUser.UserName}/profile")">@product.CreatedUser.UserName</a></div>
                <div class="creator">Contact at @product.CreatedUser.Email</div>
                <div class="price">$@product.Price</div>
            </div>


            <AuthorizeView Context="authContext">
                <Authorized>
                    <EditForm method="post" Model="productEnquiry" OnValidSubmit="SubmitEnquiry" FormName="enquire" Enhance>
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="message" class="form-label">Message:</label>
                            <InputTextArea id="message" @bind-Value="productEnquiry.Message" class="form-control" />
                            <ValidationMessage For="() => productEnquiry.Message" class="text-danger" />
                        </div>
                        @if (product.Quantity != null) {
                            <div class="mb-3">
                                <label for="quantity" class="form-label">Quantity:</label>
                                <InputNumber id="quantity" @bind-Value="productEnquiry.Quantity" class="form-control" />
                                <ValidationMessage For="() => productEnquiry.Quantity" class="text-danger" />
                                @if (displayEnquiryQuantityValidationMessage)
                                {
                                    <div class="text-danger">The quantity requested is larger than the available quantity.</div>
                                }
                            </div>
                        }
                        <button type="submit" @onclick="ClearErrors" class="btn btn-primary" disabled="@(product is null || enquirySubmitted)">Submit</button>
                    </EditForm>
                    @if (enquirySubmitted)
                    {
                        <div>Enquiry submitted</div>
                    }
                </Authorized>
                <NotAuthorized>
                    <a href="/Account/Login">Log in</a> to submit an enquiry.
                </NotAuthorized>
            </AuthorizeView>

            @if (CanCurrentUserModifyProduct)
            {
                <div class="">
                    <a href="@($"/products/edit?id={product.Id}")">Edit</a>
                    <EditForm method="post" Model="product" OnValidSubmit="DeleteProduct" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-danger" disabled="@(product is null)">Delete</button>
                    </EditForm>
                </div>
            }
            <div style="position:absolute;bottom:0;margin-top:30vh"></div>
        </div>
        
    }
</div>

@code {
    [SupplyParameterFromForm(FormName = "enquire")]
    ProductEnquiry productEnquiry { get; set; } = new();
    Product? product;
    bool enquirySubmitted;
    bool displayEnquiryQuantityValidationMessage = false;

    public ApplicationUser CurrentUser { get; set; }

    [SupplyParameterFromQuery]
    public long Id { get; set; }

    public bool CanCurrentUserModifyProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUser();

        using var context = DbFactory.CreateDbContext();
        product = await context.Product
            .Include(p => p.Images.OrderBy(i => i.Index))
            .Include(p => p.CreatedUser)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        CanCurrentUserModifyProduct = await UserCreatedProductOrIsAdministrator();
    }

    public void ClearErrors()
    {
        displayEnquiryQuantityValidationMessage = false;
    }

    public async Task DeleteProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Product.Remove(product!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }

    public void SubmitEnquiry()
    {
        if (enquirySubmitted)
        {
            return;
        }

        if (productEnquiry.Quantity != null && productEnquiry.Quantity > product.Quantity)
        {
            displayEnquiryQuantityValidationMessage = true;
            return;
        }

        productEnquiry.Product = product!;
        productEnquiry.Title = product!.Title;
        productEnquiry.Price = product!.Price;
        productEnquiry.User = CurrentUser;

        var emailCredentials =  Configuration.GetSection("SenderEmailCredential").Get<EmailCredential>();

        if (emailCredentials == null)
		{
			throw new Exception("Email credentials not found");
		}

        var emailService = new EmailService(emailCredentials);

        var message = string.Format(
            "You have received a product enquiry for your listing on Bits & Bots\n\n Enquiry Details\n Product Title: {0} \n {1} {2} From: {3} \n\n Message: {4} \n\nTo respond to this enquiry send an email to the email address in the enquiry details.",
            productEnquiry.Title, 
            productEnquiry.Price != null ? $"Price: {productEnquiry.Price}\n" : "", 
            productEnquiry.Quantity != null ? $"Quantity: {productEnquiry.Quantity}\n" : "",
            productEnquiry.User.Email,
            productEnquiry.Message
        );

        emailService.SendEmail(product.CreatedUser.Email, $"Bits & Bots Product Enquiry: {product.Title}", message);
        enquirySubmitted = true;
    }

    public async Task<bool> UserCreatedProductOrIsAdministrator()
	{
        var currentUser = await UserService.GetCurrentUser();
        var currentUserRoles = await UserService.GetCurrentUserRoles();
		return currentUser != null && (product.CreatedUserId == currentUser.Id || currentUserRoles.Contains("Administrator"));
	}
}
