@page "/products/details"

@using Microsoft.EntityFrameworkCore
@using BitsAndBots.Models
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Product</h4>
    <hr />
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@product.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@product.Description</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@product.Price</dd>
            <dt class="col-sm-2">Quantity</dt>
            <dd class="col-sm-10">@product.Quantity</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@product.CreatedUser.Email</dd>
            <dt class="col-sm-2">Image</dt>
            <dd class="col-sm-10">
                @foreach(var image in product.Images)
                {
                    <img src="data:image;base64,@System.Convert.ToBase64String(image.ImageData)" />
                }
            </dd>
        </dl>
        <div>
            <a href="@($"/products/edit?id={product.Id}")">Edit</a> |
            <a href="@($"/products")">Back to List</a>
        </div>
    }
</div>

@code {
    Product? product;

    [SupplyParameterFromQuery]
    public long Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);
        await context.Entry<Product>(product).Collection(p => p.Images).LoadAsync();
        await context.Entry<Product>(product).Reference(p => p.CreatedUser).LoadAsync();

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
