@page "/products/details"

@using BitsAndBots.Data
@using BitsAndBots.Service
@using Microsoft.EntityFrameworkCore
@using BitsAndBots.Models
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserService UserService

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
crossorigin="anonymous"></script>


@rendermode InteractiveServer

<PageTitle>Details</PageTitle>




<div>
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="page row">
            <div class="title-items">
                <div class="title">@product.Title</div>
                
            </div>
            
            <div class="col-md-6 col-sm-12">
                <div class="images">
                    
                    <div id="carousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            <button type="button" data-bs-target="#carousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                            @for (int i = 1; i < product.Images.ToArray().Length; i++)
                            {
                                <button type="button" data-bs-target="#carousel" data-bs-slide-to="@i" aria-label="Slide @i"></button>
                            }
                        </div>
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.ToArray()[0].ImageData)" class="d-block w-100" alt="...">
                            </div>
                            @for (int i = 1; i < product.Images.ToArray().Length; i++)
                            {
                                <div class="carousel-item">
                                    <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.ToArray()[i].ImageData)" class="d-block w-100" alt="..." />
                                </div>
                            }

                        </div>
                        
                    </div>
                    
                    <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>

            <div class="detail-items col-md-6 col-sm-12">
                <div class="desc-title">Sellers Description</div>
                <div class="description">@product.Description</div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="quantity">@product.Quantity available</div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="creator">Contact at @product.CreatedUser.Email</div>
                <div class="price">$@product.Price</div>
            </div>


            @if (CanCurrentUserModifyProduct)
            {
                <div class="">
                    <a href="@($"/products/edit?id={product.Id}")">Edit</a>
                    <EditForm method="post" Model="product" OnValidSubmit="DeleteProduct" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-danger" disabled="@(product is null)">Delete</button>
                    </EditForm>
                </div>
            }
        </div>
        
    }
</div>

@code {
    Product? product;

    [SupplyParameterFromQuery]
    public long Id { get; set; }
    public bool CanCurrentUserModifyProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);
        await context.Entry<Product>(product).Collection(p => p.Images).LoadAsync();
        await context.Entry<Product>(product).Reference(p => p.CreatedUser).LoadAsync();

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        CanCurrentUserModifyProduct = await UserCreatedProductOrIsAdministrator();
    }

    public async Task DeleteProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Product.Remove(product!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }

    public async Task<bool> UserCreatedProductOrIsAdministrator()
	{
        var currentUser = await UserService.GetCurrentUser();
        var currentUserRoles = await UserService.GetCurrentUserRoles();
		return currentUser != null && (product.CreatedUserId == currentUser.Id || currentUserRoles.Contains("Administrator"));
	}
}
