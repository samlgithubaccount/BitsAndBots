@page "/products"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BitsAndBots.Models
@using BitsAndBots.Data
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer


<PageTitle>Index</PageTitle>
<article class="border-bottom box-shadow">
    <h1 class="page-title" >Products</h1>
    @* TODO: Only show when logged in or change it to dislay something like sign up? *@
    <a class="create" href="products/create">Create New</a>
</article>




<article class="container-fluid">
    <div class="row">
        <div class="col-12 sidebar-sm">
            <form class="in-sidebar" @onsubmit="GetProducts">
                <div style="margin:3vh;" class="border-bottom" />
                <InputText class="search-bar" @bind-Value="SearchQuery" placeholder="Search for a product..." />
                <button class="search-button btn btn-primary">Search</button>

                <div style="margin:3vh;" class="border-bottom" />
                <label class="search-label" for="sort-by">Sort by</label>
                <select class="search-sort" @bind="SortBy" name="sort-by" id="cars">
                    @foreach (var sortOption in ProductSortOptions.GetAll())
                    {
                        <option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
                    })
                </select>
                <div style="margin:3vh;" class="border-bottom" />
            </form>
        </div>
    </div>
    <div class="row">
        
        <div class="col-lg-3 col-md-0 sidebar">
            <form class="in-sidebar" @onsubmit="GetProducts">
                <div style="margin:3vh;" class="border-bottom" />
                <InputText class="search-bar" @bind-Value="SearchQuery" placeholder="Search for a product..." />
                <button class="search-button btn btn-primary">Search</button>

                <div style="margin:3vh;"class="border-bottom"/>
                <label class="search-label" for="sort-by">Sort by</label>
                <select class ="search-sort" @bind="SortBy" name="sort-by" id="cars">
                    @foreach (var sortOption in ProductSortOptions.GetAll())
                    {
                        <option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
                    })
                </select>
                
            </form>
        </div>
        
        <div class="col-lg-9 col-md-12 scrollbox">
            @if (!Products.Any())
        {
        }
        else
        {
            foreach (var product in Products)
            {
                <div class="product-info">
                    <a href="@($"products/details?id={product.Id}")">
                        <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.First().ImageData)" />
                        <div class="name">@product.Title</div>
                    </a>
                </div>
            }
        }
        </div>
    </div>
</article>



@code {
    ProductSortOptions ProductSortOptions = new();

    public string SearchQuery { get; set; } = "";
    public string SortBy { get; set; }
    public List<Product> Products { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        SortBy = ProductSortOptions.GetDefault().DisplayName;

        await GetProducts();
    }

    private async Task GetProducts()
    {
        using var context = DbFactory.CreateDbContext();

        var sortOption = ProductSortOptions.GetByDisplayName(SortBy);

        var query = context.Product.Include(product => product.Images)
            .Where(p => p.Title.Contains(SearchQuery));

        query = sortOption.SortDirection == Models.SortDirection.Ascending
            ? query.OrderBy(sortOption.KeySelector)
            : query.OrderByDescending(sortOption.KeySelector);

        Products = await query.ToListAsync();
	}
}
