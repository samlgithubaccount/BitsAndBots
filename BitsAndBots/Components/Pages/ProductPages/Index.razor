@page "/products"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BitsAndBots.Models
@using BitsAndBots.Data
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer


<PageTitle>Products</PageTitle>

<article class="border-bottom box-shadow">
    <h1 class="page-title">Products</h1>
</article>


<article class="container-fluid">
    <div class="row">
        <div class="col-12 sidebar-sm">
            <form class="in-sidebar" @onsubmit="GetProducts">
                <div style="margin:3vh;" class="border-bottom" />
                <InputText class="search-bar" @bind-Value="SearchQuery" placeholder="Search for a product..." />
                <button class="search-button btn btn-warning">Search</button>

                <div style="margin:3vh;" class="border-bottom" />
                <label class="search-label" for="sort-by">Sort by</label>
                <select class="search-sort" @bind="SortBy" @bind:after="GetProducts" id="sort-by">
                    @foreach (var sortOption in ProductSortOptions.GetAll())
                    {
                        <option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
                    })
                </select>
                <div style="margin:3vh;" class="border-bottom" />
            </form>
        </div>
    </div>
    <div class="row">

        <div class="col-lg-3 col-md-0 sidebar">
            <form class="in-sidebar" @onsubmit="GetProducts">
                <div style="margin:3vh;" class="border-bottom" />
                <InputText class="search-bar" @bind-Value="SearchQuery" placeholder="Search for a product..." />
                <button class="search-button btn btn-warning">Search</button>

                <div style="margin:3vh;" class="border-bottom" />
                <label class="search-label" for="sort-by">Sort by</label>
                <select class="search-sort" @bind="SortBy" @bind:after="GetProducts" id="sort-by">
                    @foreach (var sortOption in ProductSortOptions.GetAll())
                    {
                        <option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
                    })
                </select>

            </form>
        </div>

        <div class="col-lg-9 col-md-12 scrollbox">
            @if (!Products.Any())
            {
            }
            else
            {
                foreach (var product in Products)
                {
                    <div class="product-info">
                        <a href="@($"products/details?id={product.Id}")">
                            <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.First().ImageData)" />
                            <div class="name">@product.Title</div>
                        </a>
                    </div>
                }
            }
        </div>
    </div>
</article>

<div>
    <p>Have a product you want to bring to market?</p>
    <p>
        <a href="products/create">List it here!</a>
    </p>
</div>


@code {
    private ProductSortOptions ProductSortOptions = new();
    private string SearchQuery { get; set; } = "";
    private string SortBy { get; set; }
    private List<Product> Products { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        SortBy = ProductSortOptions.GetDefault().DisplayName;
        await GetProducts();
    }

    private async Task GetProducts()
    {
        using var context = DbFactory.CreateDbContext();

        var sortOption = ProductSortOptions.GetByDisplayName(SortBy);

        var searchQuery = SearchQuery.ToLower().Trim();
        var searchKeywords = searchQuery.Split(new char[0], StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        var query = context.Product
            .Include(product => product.Images.OrderBy(i => i.Index))
            .Where(p => p.Title.ToLower().Contains(searchQuery) || searchKeywords.Any(k => p.Tags.ToLower().Contains(k)));

        query = sortOption.SortDirection == Models.SortDirection.Ascending
        ? query.OrderBy(sortOption.KeySelector)
        : query.OrderByDescending(sortOption.KeySelector);

        var fetchedProducts = await query.ToListAsync();
        //Re filter to ensure it contains the search tags in full as we cannot do this in the EF linq query
        if (searchKeywords.Any())
        {
            fetchedProducts = fetchedProducts
            .Where(p => p.Title.ToLower().Contains(searchQuery) ||
                (p.Tags.Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Any(t => searchKeywords.Contains(t, StringComparer.OrdinalIgnoreCase))))
            .ToList();
        }

        Products = fetchedProducts;
    }
}
