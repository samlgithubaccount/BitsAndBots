@page "/products/create"

@using BitsAndBots.Data
@using BitsAndBots.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor


@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Product.Title" class="form-control" /> 
                <ValidationMessage For="() => Product.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputTextArea id="description" @bind-Value="Product.Description" class="form-control" /> 
                <ValidationMessage For="() => Product.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label> 
                <InputNumber id="price" @bind-Value="Product.Price" class="form-control" /> 
                <ValidationMessage For="() => Product.Price" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label> 
                <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" /> 
                <ValidationMessage For="() => Product.Quantity" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    public ApplicationUser CurrentUser { get; set; }

    [SupplyParameterFromForm]
    public Product Product { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddProduct()
    {
        using var context = DbFactory.CreateDbContext();

        context.Attach(CurrentUser);

        Product.Author = CurrentUser;
        Product.AuthorId = CurrentUser.Id;

        context.Product.Add(Product);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/products");
    }

    protected override async Task OnInitializedAsync()
    {
        var claimsPrincipal = HttpContextAccessor.HttpContext.User;
        CurrentUser = await UserManager.GetUserAsync(claimsPrincipal);
    }

}
