@page "/products/create"

@using BitsAndBots.Configuration
@using BitsAndBots.Data
@using BitsAndBots.Models
@using BitsAndBots.Service
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserService UserService

@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm EditContext="@EditContext" method="post" OnValidSubmit="AddProduct" OnInvalidSubmit="ClearErrors" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="Product.Title" class="form-control" />
                <ValidationMessage For="() => Product.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputTextArea id="description" @bind-Value="Product.Description" class="form-control" />
                <ValidationMessage For="() => Product.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                <ValidationMessage For="() => Product.Price" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity Available:</label>
                <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" />
                <ValidationMessage For="() => Product.Quantity" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="tags" class="form-label">Tags:</label>
                <InputTextArea id="tags" @bind-Value="TagsList" class="form-control" />
                <ValidationMessage For="() => TagsList" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location:</label>
                <InputTextArea id="location" @bind-Value="Product.Location" class="form-control" />
                <ValidationMessage For="() => Product.Location" class="text-danger" />
            </div>
            <ImagePicker TImage="ProductImage" EditContext="@EditContext" ValidationMessageStore="@ValidationMessageStore" Images="@Product.Images" Field="@(() => Product.Images)" />
            <button @onclick="ClearErrors" type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    public Product Product { get; set; } = new();

    public EditContext EditContext;
    public ValidationMessageStore ValidationMessageStore;

    public ApplicationUser CurrentUser { get; set; }

    public async Task AddProduct()
    {
        using var context = DbFactory.CreateDbContext();

        Product.CreatedUserId = CurrentUser.Id;

        var currentDateTime = DateTime.Now;
        Product.CreatedTimestamp = currentDateTime;
        Product.LastUpdatedTimestamp = currentDateTime;

        context.Product.Add(Product);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/products");
    }

    public void ClearErrors()
    {
        ValidationMessageStore.Clear();
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUser();
    }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Product);
        ValidationMessageStore = new ValidationMessageStore(EditContext);
    }

    private string TagsList
    {
        get => string.Join(", ", Product.Tags);
        set => Product.Tags = value.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(tag => tag.Trim()).ToList();
    }
}
