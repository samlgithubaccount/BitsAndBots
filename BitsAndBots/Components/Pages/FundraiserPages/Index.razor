@page "/fundraisers"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BitsAndBots.Models
@using BitsAndBots.Data
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer


<PageTitle>Index</PageTitle>
<article class="border-bottom box-shadow">
    <h1>Index</h1>
</article>


@* TODO: Only show when logged in or change it to dislay something like sign up? *@
<p>
    <a href="fundraisers/create">Create New</a>
</p>

<form @onsubmit="GetFundraisers">
    <InputText @bind-Value="SearchQuery" placeholder="Search for a fundraiser..." />
    <button class="btn btn-primary">Search</button>
    <label for="sort-by">Sort by</label>
    <select @bind="SortBy" @bind:after="GetFundraisers" name="sort-by" id="cars">
        @foreach (var sortOption in FundraiserSortOptions.GetAll())
		{
			<option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
		})
    </select>
</form>

@if (!Fundraisers.Any()) {
} else {
    foreach (var e in Fundraisers) {
        <div>
            <a href="@($"fundraisers/details?id={e.Id}")">
                <img src="data:image;base64,@System.Convert.ToBase64String(e.Images.First().ImageData)" />
                @e.Title
                @e.StartTime.ToString("yyyy-MM-dd HH:mm")
                @if (DateTime.Now >= e.StartTime && DateTime.Now < e.EndTime)
                {
                    <span class="badge bg-success">In Progress</span>
                }
                    //TODO: Do we want to add a filter for past events
                @* 				else if (DateTime.Now < e.StartTime)
        {
        <span class="badge bg-warning">Upcoming</span>
        } *@
                @* 				else
        {
        <span class="badge bg-danger">Expired</span>
        } *@
            </a>
        </div>
    }
}


@code {
    FundraiserSortOptions FundraiserSortOptions = new();

    public string SearchQuery { get; set; } = "";
    public string SortBy { get; set; }
    public List<Fundraiser> Fundraisers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        SortBy = FundraiserSortOptions.GetDefault().DisplayName;

        await GetFundraisers();
    }

    private async Task GetFundraisers()
    {
        using var context = DbFactory.CreateDbContext();

        var sortOption = FundraiserSortOptions.GetByDisplayName(SortBy);

        var query = context.Fundraiser
            .Include(e => e.Images.OrderBy(i => i.Index))
            .Where(e => e.EndTime > DateTime.Now)
            .Where(e => e.Title.Contains(SearchQuery));

        query = sortOption.SortDirection == Models.SortDirection.Ascending
            ? query.OrderBy(sortOption.KeySelector)
            : query.OrderByDescending(sortOption.KeySelector);

        Fundraisers = await query.ToListAsync();
	}
}
