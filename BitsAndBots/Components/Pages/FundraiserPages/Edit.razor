@page "/fundraisers/edit"

@using BitsAndBots.Configuration
@using BitsAndBots.Data
@using BitsAndBots.Models
@using BitsAndBots.Service
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserService UserService

@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Fundraiser</h4>
<hr />
@if (Fundraiser is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4 form-deco"></div>
        <div class="col-md-4">
            <EditForm EditContext="@EditContext" method="post" OnValidSubmit="UpdateFundraiser" OnInvalidSubmit="ClearErrors" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Fundraiser.Id" value="@Fundraiser.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Fundraiser.Title" class="form-control" />
                    <ValidationMessage For="() => Fundraiser.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputTextArea id="description" @bind-Value="Fundraiser.Description" class="form-control" />
                    <ValidationMessage For="() => Fundraiser.Description" class="text-danger" />
                </div>
                <div class="row">
                    <div class="mb-3 col-6">
                        <label for="start-time" class="form-label">Start:</label>
                        <InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" id="start-time" @bind-Value="Fundraiser.StartTime" class="form-control" />
                        <ValidationMessage For="() => Fundraiser.StartTime" class="text-danger" />
                    </div>
                    <div class="mb-3 col-6">
                        <label for="end-time" class="form-label">End:</label>
                        <InputDate Type="InputDateType.DateTimeLocal" min="@Fundraiser.StartTime.ToString("yyyy-MM-ddTHH:mm")" id="end-time" @bind-Value="Fundraiser.EndTime" class="form-control" />
                        <ValidationMessage For="() => Fundraiser.EndTime" class="text-danger" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="organiser" class="form-label">Organiser:</label>
                    <InputText id="organiser" @bind-Value="Fundraiser.Organiser" class="form-control" />
                    <ValidationMessage For="() => Fundraiser.Organiser" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="fundraiser-link" class="form-label">Fundraiser Link:</label>
                    <InputText id="fundraiser-link" @bind-Value="Fundraiser.FundraiserLink" class="form-control" />
                    <ValidationMessage For="() => Fundraiser.FundraiserLink" class="text-danger" />
                </div>
                <!-- TODO: style text as grey -->
                <div class="mb-3">
                    <label class="form-label">Supported Registration Types:</label>
                    <ValidationMessage For="() => Fundraiser.RegistrationTypeSelected" class="text-danger" />

                    <div class="row">
                        <div class="form-group col-6">
                            <label>
                                <input type="checkbox" id="supports-individual-registration" checked="@Fundraiser.SupportsIndividualRegistration" disabled />
                                Individual
                            </label>
                        </div>
                        <div class="form-group col-6">
                            <label>
                                <input type="checkbox" id="supports-team-registration" checked="@Fundraiser.SupportsTeamRegistration" disabled />
                                Team
                            </label>
                        </div>
                    </div>
                </div>
                <!-- TODO: style text as grey -->
                <div class="mb-3">
                    <div class="form-group">
                        <label>
                            Allow Participant Links:
                            <input type="checkbox" id="supports-participant-links" checked="@Fundraiser.SupportsParticipantLinks" disabled />
                        </label>
                    </div>
                    <ValidationMessage For="() => Fundraiser.SupportsParticipantLinks" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="tags" class="form-label">Tags:</label>
                    <InputTextArea id="tags" @bind-Value="TagsList" class="form-control" />
                    <ValidationMessage For="() => TagsList" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Location:</label>
                    <InputTextArea id="location" @bind-Value="Fundraiser.Location" class="form-control" />
                    <ValidationMessage For="() => Fundraiser.Location" class="text-danger" />
                </div>
                <ImagePicker TImage="FundraiserImage" EditContext="@EditContext" ValidationMessageStore="@ValidationMessageStore" Images="@Fundraiser.Images" Field="@(() => Fundraiser.Images)" />
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
        <div class="col-md-4 form-deco"></div>
    </div>

    <div style="margin-bottom:10vh;"></div>
}


@code {
    [SupplyParameterFromQuery]
    public long Id { get; set; }

    [SupplyParameterFromForm]
    public Fundraiser? Fundraiser { get; set; }

    private IList<FundraiserImage> imagesInDatabase = [];

    public EditContext EditContext;
    public ValidationMessageStore ValidationMessageStore;

    public ApplicationUser CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUser();

        using var context = DbFactory.CreateDbContext();
        Fundraiser ??= await context.Fundraiser
            .Include(p => p.Images.OrderBy(i => i.Index))
            .Include(p => p.CreatedUser)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (Fundraiser is null || !(await UserCreatedFundraiserOrIsAdministrator()))
        {
            NavigationManager.NavigateTo("notfound");
        }

        imagesInDatabase = Fundraiser.Images.ToList();

        EditContext = new EditContext(Fundraiser);
        ValidationMessageStore = new ValidationMessageStore(EditContext);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;
    }

    public async Task UpdateFundraiser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Fundraiser!).State = EntityState.Modified;

        foreach (var image in Fundraiser.Images)
        {
            if (image.Id == null || image.Id == 0)
            {
                context.Add(image);
            } else
            {
                context.Entry(image).State = EntityState.Modified;
            }
        }

        var removedImages = imagesInDatabase.Where(dbImage => !Fundraiser.Images.Any(modifiedImage => modifiedImage.Id == dbImage.Id));
        foreach (var image in removedImages)
        {
            context.Entry(image).State = EntityState.Deleted;
        }

        Fundraiser.LastUpdatedTimestamp = DateTime.Now;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FundraiserExists(Fundraiser!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/fundraisers");
    }

    public void ClearErrors()
    {
        ValidationMessageStore.Clear();
    }

    bool FundraiserExists(long id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Fundraiser.Any(e => e.Id == id);
    }

    private string TagsList
    {
        get => string.Join(", ", Fundraiser.Tags);
        set => Fundraiser.Tags = value.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(tag => tag.Trim()).ToList();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "StartTime")
        {
            if (Fundraiser.EndTime <= Fundraiser.StartTime)
            {
                Fundraiser.EndTime = Fundraiser.StartTime.AddHours(1);
            }
        }
    }

    public async Task<bool> UserCreatedFundraiserOrIsAdministrator()
    {
        var currentUser = await UserService.GetCurrentUser();
        var currentUserRoles = await UserService.GetCurrentUserRoles();
        return currentUser != null && (Fundraiser.CreatedUserId == currentUser.Id || currentUserRoles.Contains("Administrator"));
    }
}