@page "/{userName}/Profile"

@using System.ComponentModel.DataAnnotations
@using BitsAndBots.Components.Account
@using BitsAndBots.Models
@using BitsAndBots.Service
@using Microsoft.AspNetCore.Identity
@using BitsAndBots.Data
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject UserService UserService

<PageTitle>@username - Profile</PageTitle>

<h3>@username</h3>
<AuthorizeView>
    @if (IsCurrentUserProfile)
    {
        <a href="Account/Manage">Manage account</a>
    }
</AuthorizeView>


@* TODO: All product class?
TODO: Navigate correctly *@
 @if (!Products.Any())
 {
 }
 else
 {
     <h4>Products</h4>
     <div class="col-lg-9 col-md-12 scrollbox">
         @foreach (var product in Products)
         {
             <div class="product-info">
                 <a href="@($"products/details?id={product.Id}")">
                     <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.First().ImageData)" />
                     <div class="name">@product.Title</div>
                 </a>
             </div>
         }
     </div>
 }

@if (!Events.Any())
{
}
else
{
    <h4>Events</h4>
    <div class="col-lg-9 col-md-12 scrollbox">
        @foreach (var e in Events)
        {
            <div class="product-info">
                <a href="@($"events/details?id={e.Id}")">
                    <img src="data:image;base64,@System.Convert.ToBase64String(e.Images.First().ImageData)" />
                    <div class="name">@e.Title</div>
                </a>
            </div>
        }
    </div>
}

@if (!IndividualFundraiserRegistrations.Any())
{
}
else
{
    <h4>Individual Fundraiser Registrations</h4>
    <div class="col-lg-9 col-md-12 scrollbox">
        @foreach (var registration in IndividualFundraiserRegistrations)
        {
            <div class="product-info">
                    <a href="@($"fundraisers/details?id={registration.FundraiserId}")">
                        <img src="data:image;base64,@System.Convert.ToBase64String(registration.Fundraiser.Images.First().ImageData)" />
                        <div class="name">@registration.Fundraiser.Title</div>
                </a>
            </div>
            @if (!string.IsNullOrWhiteSpace(registration.ParticipantLink))
            {
                <a href="@registration.ParticipantLink">@registration.ParticipantLink</a>
            }
        }
    </div>
}

@if (!TeamFundraiserRegistrations.Any())
{
}
else
{
    <h4>Team Fundraiser Registrations</h4>
    <div class="col-lg-9 col-md-12 scrollbox">
        @foreach (var registration in TeamFundraiserRegistrations)
        {
            <div class="product-info">
                <a href="@($"fundraisers/details?id={registration.FundraiserId}")">
                    <img src="data:image;base64,@System.Convert.ToBase64String(registration.Fundraiser.Images.First().ImageData)" />
                    <div class="name">@registration.Fundraiser.Title</div>
                </a>
            </div>
            <span>@registration.TeamName</span>
            @if (!string.IsNullOrWhiteSpace(registration.ParticipantLink))
            {
                <a href="@registration.ParticipantLink">@registration.ParticipantLink</a>
            }
        }
    </div>
}



@code {
    [Parameter]
    public string username { get; set; }

    private ApplicationUser user = default!;

    private bool IsCurrentUserProfile { get; set; }

    private List<Product> Products { get; set; } = new();
    private List<Event> Events { get; set; } = new();
    private List<IndividualFundraiserParticipationRegistration> IndividualFundraiserRegistrations { get; set; } = new();
    private List<TeamFundraiserParticipationRegistration> TeamFundraiserRegistrations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByNameAsync(username);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        var currentUser = await UserService.GetCurrentUser();
        if (currentUser != null)
        {
            IsCurrentUserProfile = currentUser.Id == user.Id;
        }

        using var context = DbFactory.CreateDbContext();

        Products = await context.Product
            .Include(p => p.Images)
            .Where(p => p.CreatedUserId == user.Id)
            .ToListAsync();
        Events = await context.Event
            .Include(e => e.Images)
            .Where(e => e.CreatedUserId == user.Id)
            .ToListAsync();
        IndividualFundraiserRegistrations = await context.IndividualFundraiserParticipationRegistration
            .Include(r => r.Fundraiser)
            .ThenInclude(f => f.Images)
            .Where(r => r.UserId == user.Id && r.Fundraiser.EndTime > DateTime.Now)
            .ToListAsync();
        TeamFundraiserRegistrations = await context.TeamFundraiserParticipationRegistration
            .Include(r => r.Fundraiser)
            .ThenInclude(f => f.Images)
            .Where(r => (r.UserId == user.Id || r.TeamMembers.Any(u => u.Id == user.Id)) && r.Fundraiser.EndTime > DateTime.Now)
            .ToListAsync();
    }
}
