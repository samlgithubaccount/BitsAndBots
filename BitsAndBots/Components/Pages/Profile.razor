@page "/{userName}/Profile"

@using System.ComponentModel.DataAnnotations
@using BitsAndBots.Components.Account
@using BitsAndBots.Models
@using BitsAndBots.Service
@using Microsoft.AspNetCore.Identity
@using BitsAndBots.Data
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject UserService UserService

<PageTitle>@username - Profile</PageTitle>

<h2 style="text-align:center">@username</h2>
<div class="row">
    <div class="col-5"></div>
    <div class="col-2">
        <AuthorizeView>
            @if (IsCurrentUserProfile)
            {
                <a href="Account/Manage" class="btn btn-warning btn-lg btn-block" role="button">Manage account</a>
            }
        </AuthorizeView>
    </div>
</div>

<div style="margin:6vh;" />

@* TODO: All product class?
TODO: Navigate correctly *@
<div class="row">
    <div class="col-12">
        <h4 style ="text-align:center">My Products</h4>
        <div style="margin:3vh;" class="border-bottom" />
        <div id="prodContents" class="scrollbox">
            @if (!Products.Any())
            {
            }
            else
            {
                @foreach (var product in Products)
                {
                    <div class="product-info">
                        <a href="@($"products/details?id={product.Id}")">
                            <img src="data:image;base64,@System.Convert.ToBase64String(product.Images.First().ImageData)" />
                            <div class="name">@product.Title</div>
                        </a>
                    </div>
                }

            }
        </div>
    </div>

    <div style="margin-bottom:10vh;"></div>

    <div class="col-12">
        <h4 style="text-align:center">My Events</h4>
        <div style="margin:3vh;" class="border-bottom" />
        <div class="scrollbox">
            @if (!Events.Any())
            {
            }
            else
            {
                @foreach (var e in Events)
                {
                    <div class="product-info">
                        <a href="@($"events/details?id={e.Id}")">
                            <img src="data:image;base64,@System.Convert.ToBase64String(e.Images.First().ImageData)" />
                            <div class="name">@e.Title</div>
                        </a>
                    </div>
                }

            }
        </div>
    </div>

    <div style="margin-bottom:10vh;"></div>

    <div class="col-12">
        <h4 style="text-align:center">Individual Fundraisers</h4>
        <div style="margin:3vh;" class="border-bottom" />
        <div class="scrollbox">
            @if (!IndividualFundraiserRegistrations.Any())
            {
            }
            else
            {
                @foreach (var registration in IndividualFundraiserRegistrations)
                {
                    <div class="product-info">
                        <a href="@($"fundraisers/details?id={registration.FundraiserId}")">
                            <img src="data:image;base64,@System.Convert.ToBase64String(registration.Fundraiser.Images.First().ImageData)" />
                            <div class="name">@registration.Fundraiser.Title</div>
                        </a>
                        @if (!string.IsNullOrWhiteSpace(registration.ParticipantLink))
                        {
                            <a href="@registration.ParticipantLink">@registration.ParticipantLink</a>
                        }
                    </div>
                }

            }
        </div>
    </div>

    <div style="margin-bottom:10vh;"></div>

    <div class="col-12">
        <h4 style="text-align:center">Team Fundraisers</h4>
        <div style="margin:3vh;" class="border-bottom" />
        <div class="scrollbox">
            @if (!TeamFundraiserRegistrations.Any())
            {
            }
            else
            {
                @foreach (var registration in TeamFundraiserRegistrations)
                {
                    <div class="product-info">
                        <a href="@($"fundraisers/details?id={registration.FundraiserId}")">
                            <img src="data:image;base64,@System.Convert.ToBase64String(registration.Fundraiser.Images.First().ImageData)" />
                            <div class="name">@registration.Fundraiser.Title</div>
                        </a>
                        <div>@registration.TeamName</div>
                        @if (!string.IsNullOrWhiteSpace(registration.ParticipantLink))
                        {
                            <a href="@registration.ParticipantLink">@registration.ParticipantLink</a>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>
<div style="margin-bottom:10vh;"></div>






@code {
    [Parameter]
    public string username { get; set; }

    private ApplicationUser user = default!;

    private bool IsCurrentUserProfile { get; set; }

    private List<Product> Products { get; set; } = new();
    private List<Event> Events { get; set; } = new();
    private List<IndividualFundraiserParticipationRegistration> IndividualFundraiserRegistrations { get; set; } = new();
    private List<TeamFundraiserParticipationRegistration> TeamFundraiserRegistrations { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByNameAsync(username);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        var currentUser = await UserService.GetCurrentUser();
        if (currentUser != null)
        {
            IsCurrentUserProfile = currentUser.Id == user.Id;
        }

        using var context = DbFactory.CreateDbContext();

        Products = await context.Product
            .Include(p => p.Images)
            .Where(p => p.CreatedUserId == user.Id)
            .ToListAsync();
        Events = await context.Event
            .Include(e => e.Images)
            .Where(e => e.CreatedUserId == user.Id)
            .ToListAsync();
        IndividualFundraiserRegistrations = await context.IndividualFundraiserParticipationRegistration
            .Include(r => r.Fundraiser)
            .ThenInclude(f => f.Images)
            .Where(r => r.UserId == user.Id && r.Fundraiser.EndTime > DateTime.Now)
            .ToListAsync();
        TeamFundraiserRegistrations = await context.TeamFundraiserParticipationRegistration
            .Include(r => r.Fundraiser)
            .ThenInclude(f => f.Images)
            .Where(r => (r.UserId == user.Id || r.TeamMembers.Any(u => u.Id == user.Id)) && r.Fundraiser.EndTime > DateTime.Now)
            .ToListAsync();
    }
}
