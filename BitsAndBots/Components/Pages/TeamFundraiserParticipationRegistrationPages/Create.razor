@page "/teamfundraiserparticipationregistrations/create"

@using BitsAndBots.Data
@using BitsAndBots.Service
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using BitsAndBots.Models

@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserService UserService

@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Fundraiser Participation Registration</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (Fundraiser is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            if (!Fundraiser.SupportsIndividualRegistration && Fundraiser.SupportsTeamRegistration)
            {
                IsTeamRegistration = true;
            }
            @if (IsTeamRegistration)
            {
                <EditForm method="post" Model="TeamFundraiserParticipationRegistration" OnValidSubmit="AddFundraiserParticipationRegistration" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    @if (registrationValidationMessages.Any())
                    {
                        <ul class="text-danger">
                            @foreach (var message in registrationValidationMessages)
                            {
                                <li class="validation-message">@message</li>
                            }
                        </ul>
                    }
                    <ValidationSummary class="text-danger" />
                    @if (Fundraiser.SupportsIndividualRegistration && Fundraiser.SupportsTeamRegistration)
                    {
                        <div class="mb-3">
                            <div class="form-group">
                                <label>
                                    Team Registration:
                                    <InputCheckbox @bind-Value="IsTeamRegistration" />
                                </label>
                            </div>
                        </div>
                    }
                    <div class="mb-3">
                        <label for="teamname" class="form-label">TeamName:</label>
                        <InputText id="teamname" @bind-Value="TeamFundraiserParticipationRegistration.TeamName" class="form-control" />
                        <ValidationMessage For="() => TeamFundraiserParticipationRegistration.TeamName" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="team-member" class="form-label">Team Members:</label>
                        <InputText id="team-member" @oninput="TeamMemberSearchValueChanged" @bind-Value="SearchUsername" class="form-control" />
                        <button class="btn btn-primary" disabled="@(SearchTeamMember == null)" type="button" @onclick="AddTeamMember">Add</button>
                        <ValidationMessage For="() => TeamFundraiserParticipationRegistration.TeamMembers" class="text-danger" />
                        <ul>
                            <li>
                                @CurrentUser.UserName
                            </li>
                            @foreach (var teamMember in TeamFundraiserParticipationRegistration.TeamMembers)
                            {
                                <li>
                                    @teamMember.UserName
                                    <button class="btn btn-primary" type="button" @onclick="(()=> RemoveUser(teamMember))">Remove</button>
                                </li>
                            }
                        </ul>
                    </div>
                    @if (Fundraiser.SupportsParticipantLinks)
                    {
                        <div class="mb-3">
                            <label for="participantlink" class="form-label">ParticipantLink:</label>
                            <InputText id="participantlink" @bind-Value="ParticipantLink" class="form-control" />
                            <ValidationMessage For="() => ParticipantLink" class="text-danger" />
                        </div>
                    }
                    <button @onclick="ClearErrors" type="submit" class="btn btn-primary">Register</button>
                </EditForm>
            } else
            {
                <EditForm method="post" Model="IndividualFundraiserParticipationRegistration" OnValidSubmit="AddFundraiserParticipationRegistration" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    @if (registrationValidationMessages.Any())
                    {
                        <ul class="text-danger">
                            @foreach (var message in registrationValidationMessages)
                            {
                                <li class="validation-message">@message</li>
                            }
                        </ul>
                    }
                    <ValidationSummary class="text-danger" />
                    @if (Fundraiser.SupportsIndividualRegistration && Fundraiser.SupportsTeamRegistration)
                    {
                        <div class="mb-3">
                            <div class="form-group">
                                <label>
                                    Team Registration:
                                    <InputCheckbox @bind-Value="IsTeamRegistration" />
                                </label>
                            </div>
                        </div>
                    }
                    @if (Fundraiser.SupportsParticipantLinks)
                    {
                        <div class="mb-3">
                            <label for="participantlink" class="form-label">Participant Link:</label>
                            <InputText id="participantlink" @bind-Value="ParticipantLink" class="form-control" />
                            <ValidationMessage For="() => ParticipantLink" class="text-danger" />
                        </div>
                    }
                    <button @onclick="ClearErrors" type="submit" class="btn btn-primary">Register</button>
                </EditForm>
            }
            
        }
    </div>
</div>

<div>
    <a href="@($"/fundraisers/details?id={FundraiserId}")">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private long FundraiserId { get; set; }
    [SupplyParameterFromForm]
    private TeamFundraiserParticipationRegistration TeamFundraiserParticipationRegistration { get; set; } = new();
    [SupplyParameterFromForm]
    private IndividualFundraiserParticipationRegistration IndividualFundraiserParticipationRegistration { get; set; } = new();
    private string ParticipantLink { get; set; }
    IList<string> registrationValidationMessages = new List<string>();

    public ApplicationUser CurrentUser { get; set; }
    private Fundraiser Fundraiser;

    private bool IsTeamRegistration = false;
    private string SearchUsername = "";
    private ApplicationUser? SearchTeamMember = null;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUser();

        using var context = DbFactory.CreateDbContext();
        Fundraiser ??= await context.Fundraiser.FirstOrDefaultAsync(m => m.Id == FundraiserId);

        if (Fundraiser is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public void ClearErrors()
    {
        registrationValidationMessages.Clear();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddFundraiserParticipationRegistration()
    {
        using var context = DbFactory.CreateDbContext();

        if (Fundraiser.SupportsIndividualRegistration) {
            var existingIndividualRegistrationForCreator = await context.IndividualFundraiserParticipationRegistration
                .FirstOrDefaultAsync(registration => registration.UserId == CurrentUser.Id && registration.FundraiserId == Fundraiser.Id);
            if (existingIndividualRegistrationForCreator != null)
            {
                registrationValidationMessages.Add("You have an existing registration for this fundraiser.");
            }

            var teamMembersWithExistingIndividualRegistrations = await context.IndividualFundraiserParticipationRegistration
                .Where(registration => registration.FundraiserId == Fundraiser.Id && TeamFundraiserParticipationRegistration.TeamMembers.Select(user => user.Id).Contains(registration.User.Id))
                .Select(registration => registration.User.UserName)
                .ToListAsync();
            if (teamMembersWithExistingIndividualRegistrations.Any())
            {
                registrationValidationMessages.Add($"The following users have an existing individual registration for this fundraiser: {string.Join(", ", teamMembersWithExistingIndividualRegistrations)}");
            }
        }

        if (Fundraiser.SupportsTeamRegistration) {
            var existingTeamRegistrationForCreator = await context.TeamFundraiserParticipationRegistration
                .FirstOrDefaultAsync(registration => registration.UserId == CurrentUser.Id && registration.FundraiserId == Fundraiser.Id);
            if (existingTeamRegistrationForCreator != null)
            {
                registrationValidationMessages.Add("You have an existing registration for this fundraiser.");
            }

            var existingTeamMembershipForCreator = await context.TeamFundraiserParticipationRegistration
                .Where(registration => registration.FundraiserId == Fundraiser.Id)
                .SelectMany(registration => registration.TeamMembers)
                .FirstOrDefaultAsync(user => CurrentUser.Id == user.Id);
            if (existingTeamMembershipForCreator != null)
            {
                registrationValidationMessages.Add("You have an existing team membership for this fundraiser.");
            }

            var teamMembersWithExistingTeamRegistrations = await context.TeamFundraiserParticipationRegistration
                .Where(registration => registration.FundraiserId == Fundraiser.Id)
                .Select(registration => registration.User)
                .Where(user => TeamFundraiserParticipationRegistration.TeamMembers.Select(user => user.Id).Contains(user.Id))
                .Select(user => user.UserName)
                .ToListAsync();
            if (teamMembersWithExistingTeamRegistrations.Any())
            {
                registrationValidationMessages.Add($"The following users have an existing team registration for this fundraiser: {string.Join(", ", teamMembersWithExistingTeamRegistrations)}");
            }

            var teamMembersWithExistingTeamMemberships = await context.TeamFundraiserParticipationRegistration
                .Where(registration => registration.FundraiserId == Fundraiser.Id)
                .SelectMany(registration => registration.TeamMembers)
                .Where(user => TeamFundraiserParticipationRegistration.TeamMembers.Select(user => user.Id).Contains(user.Id))
                .Select(user => user.UserName)
                .ToListAsync();
            if (teamMembersWithExistingTeamMemberships.Any())
            {
                registrationValidationMessages.Add($"The following users have an existing team membership for this fundraiser: {string.Join(", ", teamMembersWithExistingTeamMemberships)}");
            }
        }

        if (registrationValidationMessages.Any())
        {
            return;
        }

        if (IsTeamRegistration)
        {
            TeamFundraiserParticipationRegistration.FundraiserId = FundraiserId;
            TeamFundraiserParticipationRegistration.UserId = CurrentUser.Id;
            TeamFundraiserParticipationRegistration.ParticipantLink = ParticipantLink;

            foreach (var teamMember in TeamFundraiserParticipationRegistration.TeamMembers)
            {
                context.Entry(teamMember).State = EntityState.Unchanged;
            }

            context.TeamFundraiserParticipationRegistration.Add(TeamFundraiserParticipationRegistration);
        }
        else
        {
            IndividualFundraiserParticipationRegistration.FundraiserId = FundraiserId;
            IndividualFundraiserParticipationRegistration.UserId = CurrentUser.Id;
            IndividualFundraiserParticipationRegistration.ParticipantLink = ParticipantLink;
            context.IndividualFundraiserParticipationRegistration.Add(IndividualFundraiserParticipationRegistration);
        }

        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/fundraisers/details?id={FundraiserId}");
    }

    private void RemoveUser(ApplicationUser user)
    {
        TeamFundraiserParticipationRegistration.TeamMembers.Remove(user);
    }

    private async Task TeamMemberSearchValueChanged(ChangeEventArgs e)
    {
        if (e.Value != null) {
            using var context = DbFactory.CreateDbContext();
            var user = await context.Users.FirstOrDefaultAsync(u => u.UserName == e.Value.ToString());
            SearchTeamMember = user;
        }
    }

    private void AddTeamMember()
    {
        if (SearchTeamMember != null && !TeamFundraiserParticipationRegistration.TeamMembers.Any(u => u.Id == SearchTeamMember.Id) && SearchTeamMember.Id != CurrentUser.Id)
        {
            TeamFundraiserParticipationRegistration.TeamMembers.Add(SearchTeamMember);
            SearchTeamMember = null;
            SearchUsername = "";
        }
    }
}
