@page "/events"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BitsAndBots.Models
@using BitsAndBots.Data
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer


<PageTitle>Events</PageTitle>

<h1>Events</h1>

<form @onsubmit="GetEvents">
    <InputText @bind-Value="SearchQuery" placeholder="Search for an event..." />
    <button class="btn btn-primary">Search</button>
    <label for="sort-by">Sort by</label>
    <select @bind="SortBy" @bind:after="GetEvents">
        @foreach (var sortOption in EventSortOptions.GetAll())
		{
			<option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
		}
    </select>
</form>

@if (!Events.Any())
{
    
} else {
    foreach (var e in Events) {
        <div>
            <a href="@($"events/details?id={e.Id}")">
                <img src="data:image;base64,@System.Convert.ToBase64String(e.Images.First().ImageData)" />
                @e.Title
                @e.StartTime.ToString("yyyy-MM-dd HH:mm")
                @if (DateTime.Now >= e.StartTime && DateTime.Now < e.EndTime)
                {
                    <span class="badge bg-success">On Now</span>
                }
            </a>
        </div>
    }
}

<div>
    <p>Running your own entrepreneurship related event?</p>
    <p>
        <a href="events/create">Advertise your event!</a>
    </p>
</div>


@code {
    private EventSortOptions EventSortOptions = new();
    private string SearchQuery { get; set; } = "";
    private string SortBy { get; set; }
    private List<Event> Events { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        SortBy = EventSortOptions.GetDefault().DisplayName;
        await GetEvents();
    }

    private async Task GetEvents()
    {
        using var context = DbFactory.CreateDbContext();

        var sortOption = EventSortOptions.GetByDisplayName(SortBy);

        var query = context.Event
            .Include(e => e.Images.OrderBy(i => i.Index))
            .Where(e => e.EndTime > DateTime.Now)
            .Where(e => e.Title.Contains(SearchQuery));

        query = sortOption.SortDirection == Models.SortDirection.Ascending
            ? query.OrderBy(sortOption.KeySelector)
            : query.OrderByDescending(sortOption.KeySelector);

        Events = await query.ToListAsync();
	}
}
