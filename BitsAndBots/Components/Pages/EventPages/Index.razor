@page "/events"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BitsAndBots.Models
@using BitsAndBots.Data
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@rendermode InteractiveServer


<PageTitle>Events</PageTitle>

<article class="border-bottom box-shadow">
    <h1 class="page-title">Events</h1>
</article>
<article class="container-fluid">
    <div class="row">
        <div class="col-12 sidebar-sm">
            <form @onsubmit="GetEvents">
                <div style="margin:3vh;" class="border-bottom" />
                <InputText class="search-bar" @bind-Value="SearchQuery" placeholder="Search for an event..." />
                <button class="search-button btn btn-warning">Search</button>
                <div style="margin:3vh;" class="border-bottom" />
                <label class="search-label" for="sort-by">Sort by</label>
                <select class="search-sort" @bind="SortBy" @bind:after="GetEvents">
                    @foreach (var sortOption in EventSortOptions.GetAll())
                    {
                        <option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
                    }
                </select>
                <div style="margin:3vh;" class="border-bottom" />
            </form>
        </div>
    </div>
    <div class="row">

        <div class="col-lg-3 col-md-0 sidebar">
            <form @onsubmit="GetEvents">
                <div style="margin:3vh;" class="border-bottom" />
                <InputText class="search-bar" @bind-Value="SearchQuery" placeholder="Search for an event..." />
                <button class="search-button btn btn-warning">Search</button>
                <div style="margin:3vh;" class="border-bottom" />
                <label class="search-label" for="sort-by">Sort by</label>
                <select class="search-sort" @bind="SortBy" @bind:after="GetEvents">
                    @foreach (var sortOption in EventSortOptions.GetAll())
                    {
                        <option value="@sortOption.DisplayName">@sortOption.DisplayName</option>
                    }
                </select>

            </form>
        </div>

        <div class="col-lg-9 col-md-12 scrollbox">
            @if (!Events.Any())
            {

            }
            else
            {
                foreach (var e in Events)
                {
                    <div class="product-info">
                        <a href="@($"events/details?id={e.Id}")">
                            <img src="data:image;base64,@System.Convert.ToBase64String(e.Images.First().ImageData)" />
                            <div class="name">@e.Title</div>
                            <div class="date">@e.StartTime.ToString("yyyy-MM-dd HH:mm")</div>
                            
                            @if (DateTime.Now >= e.StartTime && DateTime.Now < e.EndTime)
                            {
                                <span class="badge bg-success">On Now</span>
                            }
                        </a>
                    </div>
                }
            }
        </div>
    </div>
</article>




<div>
    <p>Running your own entrepreneurship related event?</p>
    <p>
        <a href="events/create">Advertise your event!</a>
    </p>
</div>


@code {
    private EventSortOptions EventSortOptions = new();
    private string SearchQuery { get; set; } = "";
    private string SortBy { get; set; }
    private List<Event> Events { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        SortBy = EventSortOptions.GetDefault().DisplayName;
        await GetEvents();
    }

    private async Task GetEvents()
    {
        using var context = DbFactory.CreateDbContext();

        var sortOption = EventSortOptions.GetByDisplayName(SortBy);

        var searchQuery = SearchQuery.ToLower().Trim();
        var searchKeywords = searchQuery.Split(new char[0], StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        var query = context.Event
            .Include(e => e.Images.OrderBy(i => i.Index))
            .Where(e => e.EndTime > DateTime.Now)
            .Where(e => e.Title.ToLower().Contains(searchQuery) || searchKeywords.Any(k => e.Tags.ToLower().Contains(k)));

        query = sortOption.SortDirection == Models.SortDirection.Ascending
            ? query.OrderBy(sortOption.KeySelector)
            : query.OrderByDescending(sortOption.KeySelector);

        var fetchedEvents = await query.ToListAsync();
        //Re filter to ensure it contains the search tags in full as we cannot do this in the EF linq query
        if (searchKeywords.Any())
        {
            fetchedEvents = fetchedEvents
            .Where(e => e.Title.ToLower().Contains(searchQuery) ||
                (e.Tags.Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Any(t => searchKeywords.Contains(t, StringComparer.OrdinalIgnoreCase))))
            .ToList();
        }

        Events = fetchedEvents;
	}
}
