@page "/events/details"

@using BitsAndBots.Configuration
@using BitsAndBots.Data
@using BitsAndBots.Service
@using Microsoft.EntityFrameworkCore
@using BitsAndBots.Models
@inject IConfiguration Configuration
@inject IDbContextFactory<BitsAndBots.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserService UserService

@rendermode InteractiveServer

<PageTitle>Details</PageTitle>




<div>
    @if (eventEntity is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="page row">
            <div class="title-items">
                <div class="title">@eventEntity.Title</div>

            </div>

            <div class="col-md-6 col-sm-12">
                <div class="images">

                    <div id="carousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            <button type="button" data-bs-target="#carousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                            @for (int i = 1; i < eventEntity.Images.ToArray().Length; i++)
                            {
                                <button type="button" data-bs-target="#carousel" data-bs-slide-to="@i" aria-label="Slide @i"></button>
                            }
                        </div>
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <img src="data:image;base64,@System.Convert.ToBase64String(eventEntity.Images.ToArray()[0].ImageData)" class="d-block w-100" alt="...">
                            </div>
                            @for (int i = 1; i < eventEntity.Images.ToArray().Length; i++)
                            {
                                <div class="carousel-item">
                                    <img src="data:image;base64,@System.Convert.ToBase64String(eventEntity.Images.ToArray()[i].ImageData)" class="d-block w-100" alt="..." />
                                </div>
                            }

                        </div>

                    </div>

                    <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon cara" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon cara" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>

            <div class="detail-items col-md-6 col-sm-12">
                <div class="desc-title">Description</div>
                <div class="description">@eventEntity.Description</div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="row">
                    <div class="desc-title col-6">Start</div>
                    <div class="desc-title col-6">End</div>
                    <div class="description col-6">@eventEntity.StartTime</div>
                    <div class="description col-6">@eventEntity.EndTime</div>
                </div>

                <div style="margin:3vh;" class="border-bottom" />

                <div class="row">
                    <div class="desc-title col-6">Ticket Price</div>
                    <div class="desc-title col-6">Ticket Link</div>
                    <div class="description col-6">$@eventEntity.TicketPrice</div>
                    <div class="description col-6"><a href="@eventEntity.TicketLink">@eventEntity.TicketLink</a></div>
                </div>
                
                <div style="margin:3vh;" class="border-bottom" />
                <div class="desc-title">Location</div>
                <div class="description">@eventEntity.Location</div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="creator">Created by <a href="@($"/{eventEntity.CreatedUser.UserName}/profile")">@eventEntity.CreatedUser.UserName</a></div>
                <div style="margin:3vh;" class="border-bottom" />
                <div class="col-sm-2">Created</div>
                <div class="col-sm-10">@eventEntity.CreatedTimestamp</div>
                <div class="col-sm-2">Last Updated</div>
                <div class="col-sm-10">@eventEntity.LastUpdatedTimestamp</div>
            </div>




            @if (CanCurrentUserModifyEvent)
            {
                <div style="margin:3vh;" class="border-bottom" />
                <div class="row">
                    <div class="col-4"></div>
                    <div class="col-2">
                        <a href="@($"/events/edit?id ={eventEntity.Id}")" class="btn btn-info btn-lg btn-block col-2" role="button">Edit</a>
                    </div>

                    <EditForm class="col-2" method="post" Model="eventEntity" OnValidSubmit="DeleteEvent" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-danger btn-lg btn-block" disabled="@(eventEntity is null)">Delete</button>
                    </EditForm>


                </div>
            }
            <div style="position:absolute;bottom:0;margin-top:30vh"></div>
        </div>

    }
</div>


@code {
    Event? eventEntity;

    public ApplicationUser CurrentUser { get; set; }

    [SupplyParameterFromQuery]
    public long Id { get; set; }

    public bool CanCurrentUserModifyEvent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUser();

        using var context = DbFactory.CreateDbContext();
        eventEntity = await context.Event
            .Include(e => e.Images.OrderBy(i => i.Index))
            .Include(e => e.CreatedUser)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (eventEntity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        CanCurrentUserModifyEvent = await UserCreatedEventOrIsAdministrator();
    }

    public async Task DeleteEvent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Event.Remove(eventEntity!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/events");
    }

    public async Task<bool> UserCreatedEventOrIsAdministrator()
	{
        var currentUser = await UserService.GetCurrentUser();
        var currentUserRoles = await UserService.GetCurrentUserRoles();
		return currentUser != null && (eventEntity.CreatedUserId == currentUser.Id || currentUserRoles.Contains("Administrator"));
	}
}
